/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//The IngredientUpdate page allows the user to update or delete an ingredient in the database.


import java.sql.*;
import javax.swing.*;
import java.math.BigDecimal;

/**
 *
 * @author Max
 */
public class IngredientUpdate extends javax.swing.JFrame {
    
    private static final String DB_URL = "jdbc:mysql://computing.gfmat.org:3306/BMSProject";
    private static final String USER = "MBrain";
    private static final String PASS = "hkFfdZ2X3N";

    /**
     * Creates new form InventoryUpdate
     */
    public IngredientUpdate() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUpdateIngredient = new javax.swing.JLabel();
        txtIDInput = new javax.swing.JTextField();
        btnFindItem = new javax.swing.JButton();
        lblSelectedID = new javax.swing.JLabel();
        txtNewID = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtCost = new javax.swing.JTextField();
        lblUpdateName = new javax.swing.JLabel();
        lblUpdateQuantity = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JToggleButton();
        lblUpdateCost = new javax.swing.JLabel();
        lblUpdateID = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        chkNeedsOrder = new javax.swing.JCheckBox();
        lblUpdateSupplier = new javax.swing.JLabel();
        txtSupplierID = new javax.swing.JTextField();
        btnClose = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblUpdateIngredient.setText("Update Ingredients");

        txtIDInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDInputActionPerformed(evt);
            }
        });

        btnFindItem.setText("ID Search");
        btnFindItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindItemActionPerformed(evt);
            }
        });

        lblSelectedID.setText("Currently Selected: ");

        txtNewID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewIDActionPerformed(evt);
            }
        });

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        txtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostActionPerformed(evt);
            }
        });

        lblUpdateName.setText("Update Name");

        lblUpdateQuantity.setText("Update Quantity");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblUpdateCost.setText("Update Cost");

        lblUpdateID.setText("Update ID");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        chkNeedsOrder.setText("Needs Order?");
        chkNeedsOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNeedsOrderActionPerformed(evt);
            }
        });

        lblUpdateSupplier.setText("Update SupplierID");

        txtSupplierID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSupplierIDActionPerformed(evt);
            }
        });

        btnClose.setText("x");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(chkNeedsOrder)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(txtIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFindItem)
                        .addGap(30, 30, 30)
                        .addComponent(lblSelectedID)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblUpdateID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNewID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblUpdateName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblUpdateQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUpdateCost)
                                    .addComponent(lblUpdateSupplier))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSupplierID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(89, 89, 89))))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(lblUpdateIngredient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblUpdateIngredient))
                    .addComponent(btnClose))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindItem)
                    .addComponent(lblSelectedID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUpdateName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateQuantity)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateSupplier)
                    .addComponent(txtSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(chkNeedsOrder)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDInputActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //this method updates the selected record to reflect the data recorded in the fields

        //retrieve & validate data from GUI forms using ValidationRoutines
        String name = txtName.getText();
        if (!ValidationRoutines.isValidString(name, "name", this)) {
            return;
        }

        Integer quantity = ValidationRoutines.parseInteger(txtQuantity.getText(), "quantity", this);
        if (quantity == null || quantity <= 0) {
            return;
        }

        BigDecimal unitCost = ValidationRoutines.parseBigDecimal(txtCost.getText(), "unit cost", this);
        if (unitCost == null) {
            return;
        }

        Integer supplierId = ValidationRoutines.parseInteger(txtSupplierID.getText(), "supplier ID", this);
        if (supplierId == null) {
            return;
        }

        boolean needsReorder = chkNeedsOrder.isSelected();

        String query = "UPDATE tblIngredients SET " //make statement with placeholders
                         + "IngredientName = COALESCE(?, IngredientName), " //COALESCE means fields can be left blank if nothing needs to be changed
                         + "IngredientQuantity = COALESCE(?, IngredientQuantity), "
                         + "UnitCost = COALESCE(?, UnitCost), "
                         + "NeedsReorder = ?, "
                         + "SupplierID = COALESCE(?, SupplierID) "
                         + "WHERE IngredientID = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS); //connect to database using predefined fields (different method of connection to usual, wanted to try this)
             PreparedStatement pstmt = conn.prepareStatement(query)) { //prevent SQL injection

            pstmt.setString(1, name.isEmpty() ? null : name);
            pstmt.setObject(2, quantity);
            pstmt.setObject(3, unitCost);
            pstmt.setBoolean(4, needsReorder);
            pstmt.setObject(5, supplierId);
            pstmt.setInt(6, Integer.parseInt(txtIDInput.getText()));
            //set placeholder values to form data
            int updatedRows = pstmt.executeUpdate(); //execute SQL statement
            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(this, "Ingredient updated successfully!"); //success message if rows were updated
            } else {
                JOptionPane.showMessageDialog(this, "No changes were made or ingredient not found."); //message for if there was no change
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error updating ingredient: " + ex.getMessage()); //display error message
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtNewIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewIDActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void txtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void chkNeedsOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNeedsOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkNeedsOrderActionPerformed

    private void btnFindItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindItemActionPerformed
        // TODO add your handling code here:
        //this method selects a record from the database using the input ID
        
       int id = Integer.parseInt(txtIDInput.getText()); //convert IDInput into an integer
        String query = "SELECT * FROM tblIngredients WHERE IngredientID = ?"; //select all information from ingredient with placeholder ID
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS); //connect to database
             PreparedStatement pstmt = conn.prepareStatement(query)) { //prevent SQL injection

            pstmt.setInt(1, id); //set placeholder to IDInput
            try (ResultSet rs = pstmt.executeQuery()) { //executes SELECT query and stores in resultset
                if (rs.next()) { //check if query returned something and either updates or sends "not found" message
                    txtNewID.setText(String.valueOf(rs.getInt("IngredientID")));
                    txtName.setText(rs.getString("IngredientName"));
                    txtQuantity.setText(String.valueOf(rs.getInt("IngredientQuantity")));
                    txtCost.setText(rs.getBigDecimal("UnitCost").toPlainString());
                    txtSupplierID.setText(String.valueOf(rs.getInt("SupplierID")));
                    chkNeedsOrder.setSelected(rs.getBoolean("NeedsReorder"));
                    //populate fields with data
                } else {
                    JOptionPane.showMessageDialog(this, "Ingredient not found!"); //not found message
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error during search: " + ex.getMessage()); //display error message
        }

    }//GEN-LAST:event_btnFindItemActionPerformed

    private void txtSupplierIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSupplierIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSupplierIDActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //this method deletes the selected record from the database
        int id = Integer.parseInt(txtIDInput.getText()); //convert IDInput into an integer
        String query = "DELETE FROM tblIngredients WHERE IngredientID = ?"; //SQL statement to delete record with placeholder ID

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS); //make connection to database
             PreparedStatement pstmt = conn.prepareStatement(query)) { //prevent SQL injection

            pstmt.setInt(1, id); //set placeholder to IDInput

            int deletedRows = pstmt.executeUpdate(); 
            if (deletedRows > 0) {
                JOptionPane.showMessageDialog(this, "Ingredient deleted successfully!"); //successful deletion message
            } else {
                JOptionPane.showMessageDialog(this, "Ingredient not found or could not be deleted."); //no deletion message
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error during deletion: " + ex.getMessage()); //failed deletion message
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngredientUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngredientUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngredientUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngredientUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngredientUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindItem;
    private javax.swing.JToggleButton btnUpdate;
    private javax.swing.JCheckBox chkNeedsOrder;
    private javax.swing.JLabel lblSelectedID;
    private javax.swing.JLabel lblUpdateCost;
    private javax.swing.JLabel lblUpdateID;
    private javax.swing.JLabel lblUpdateIngredient;
    private javax.swing.JLabel lblUpdateName;
    private javax.swing.JLabel lblUpdateQuantity;
    private javax.swing.JLabel lblUpdateSupplier;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtIDInput;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNewID;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSupplierID;
    // End of variables declaration//GEN-END:variables
}
